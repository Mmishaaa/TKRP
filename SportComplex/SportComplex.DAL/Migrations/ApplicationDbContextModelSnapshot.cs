// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportComplex.DAL;

#nullable disable

namespace SportComplex.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SportComplex.DAL.Entities.CoachEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.FootballBookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FootbalEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FootballFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("FootbalEquipmentId");

                    b.HasIndex("FootballFieldId");

                    b.HasIndex("UserId");

                    b.ToTable("FootballBookings");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.FootballEquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("FootballEquipments");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.FootballFieldEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("FootballFields");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.GolfBookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GolfCourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GolfEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("GolfCourtId");

                    b.HasIndex("GolfEquipmentId");

                    b.HasIndex("UserId");

                    b.ToTable("GolfBookings");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.GolfCourtEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("GolfCourts");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.GolfEquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("GolfEquipments");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.PingPongBookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PingPongEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PingPongTableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("PingPongEquipmentId");

                    b.HasIndex("PingPongTableId");

                    b.HasIndex("UserId");

                    b.ToTable("PingPongBookings");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.PingPongEquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PingPongEquipments");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.PingPongTableEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PingPongTables");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.ReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StarsCount")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.SwimmingPoolBookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SwimmingPoolEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SwimmingPoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("SwimmingPoolEquipmentId");

                    b.HasIndex("SwimmingPoolId");

                    b.HasIndex("UserId");

                    b.ToTable("SwimmingPoolBookings");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.SwimmingPoolEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SwimmingPools");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.SwimmingPoolEquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SwimmingPoolEquipments");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.TennisBookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TennisCourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TennisEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("TennisCourtId");

                    b.HasIndex("TennisEquipmentId");

                    b.HasIndex("UserId");

                    b.ToTable("TennisBookings");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.TennisCourtEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TennisCourts");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.TennisEquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TennisEquipments");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.FootballBookingEntity", b =>
                {
                    b.HasOne("SportComplex.DAL.Entities.CoachEntity", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("SportComplex.DAL.Entities.FootballEquipmentEntity", "FootbalEquipment")
                        .WithMany()
                        .HasForeignKey("FootbalEquipmentId");

                    b.HasOne("SportComplex.DAL.Entities.FootballFieldEntity", "FootballField")
                        .WithMany()
                        .HasForeignKey("FootballFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportComplex.DAL.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("FootbalEquipment");

                    b.Navigation("FootballField");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.GolfBookingEntity", b =>
                {
                    b.HasOne("SportComplex.DAL.Entities.CoachEntity", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("SportComplex.DAL.Entities.GolfCourtEntity", "GolfCourt")
                        .WithMany()
                        .HasForeignKey("GolfCourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportComplex.DAL.Entities.GolfEquipmentEntity", "GolfEquipment")
                        .WithMany()
                        .HasForeignKey("GolfEquipmentId");

                    b.HasOne("SportComplex.DAL.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("GolfCourt");

                    b.Navigation("GolfEquipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.PingPongBookingEntity", b =>
                {
                    b.HasOne("SportComplex.DAL.Entities.CoachEntity", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("SportComplex.DAL.Entities.PingPongEquipmentEntity", "PingPongEquipment")
                        .WithMany()
                        .HasForeignKey("PingPongEquipmentId");

                    b.HasOne("SportComplex.DAL.Entities.PingPongTableEntity", "PingPongTable")
                        .WithMany()
                        .HasForeignKey("PingPongTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportComplex.DAL.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("PingPongEquipment");

                    b.Navigation("PingPongTable");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.ReviewEntity", b =>
                {
                    b.HasOne("SportComplex.DAL.Entities.CoachEntity", "Coach")
                        .WithMany("Reviews")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportComplex.DAL.Entities.UserEntity", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.SwimmingPoolBookingEntity", b =>
                {
                    b.HasOne("SportComplex.DAL.Entities.CoachEntity", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("SportComplex.DAL.Entities.SwimmingPoolEquipmentEntity", "SwimmingPoolEquipment")
                        .WithMany()
                        .HasForeignKey("SwimmingPoolEquipmentId");

                    b.HasOne("SportComplex.DAL.Entities.SwimmingPoolEntity", "SwimmingPool")
                        .WithMany()
                        .HasForeignKey("SwimmingPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportComplex.DAL.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("SwimmingPool");

                    b.Navigation("SwimmingPoolEquipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.TennisBookingEntity", b =>
                {
                    b.HasOne("SportComplex.DAL.Entities.CoachEntity", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("SportComplex.DAL.Entities.TennisCourtEntity", "TennisCourt")
                        .WithMany()
                        .HasForeignKey("TennisCourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportComplex.DAL.Entities.TennisEquipmentEntity", "TennisEquipment")
                        .WithMany()
                        .HasForeignKey("TennisEquipmentId");

                    b.HasOne("SportComplex.DAL.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("TennisCourt");

                    b.Navigation("TennisEquipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.CoachEntity", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SportComplex.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
